{"version":3,"sources":["webpack:///./src/components/PostCard.jsx","webpack:///./src/pages/code.js"],"names":["PostCardContainer","colors","grey200","blue500","PostTitle","PostDescription","PostCardAction","PostCard","title","description","link","className","href","target","rel","text","RichText","render","BlogTitle","BlogGrid","dimensions","maxwidthMobile","Blog","posts","meta","titleTemplate","name","content","property","author","concat","Layout","map","post","node","post_title","post_preview_description","post_link","url","query","data","prismic","allPosts","edges","site","siteMetadata"],"mappings":"oOAOMA,EAAoB,YAAO,MAAP,sBAAH,oBACDC,IAAOC,QADN,2WAsBRD,IAAOE,QAtBC,yHAkCjBC,EAAY,YAAO,KAAP,sBAAH,sDAKTC,EAAkB,YAAO,MAAP,sBAAH,qFASfC,EAAiB,YAAO,MAAP,sBAAH,iOA0BLC,EAZE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,KAAvB,OACf,YAACV,EAAD,CAAmBW,UAAU,gBAC3B,iBAAGC,KAAMF,EAAMG,OAAO,SAASC,IAAI,uBACjC,YAACV,EAAD,KAAYI,EAAM,GAAGO,MACrB,YAACV,EAAD,KAAkBW,WAASC,OAAOR,IAClC,YAACH,EAAD,CAAgBK,UAAU,kBAA1B,SACQ,iC,sCClEd,IAAMO,EAAY,YAAO,KAAP,oBAAH,6CAKTC,EAAW,YAAO,MAAP,oBAAH,iKAUUC,IAAWC,eAVrB,kDAgBRC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACT,8BACI,YAAC,IAAD,CACIhB,MAAK,gBACLiB,cAAa,gBACbD,KAAM,CACF,CACIE,KAAK,gCACLC,QAASH,EAAKf,aAElB,CACImB,SAAS,WACTD,QAAQ,iCAEZ,CACIC,SAAS,iBACTD,QAASH,EAAKf,aAElB,CACImB,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASH,EAAKK,QAElB,CACIH,KAAK,gBACLC,QAASH,EAAKhB,OAElB,CACIkB,KAAK,sBACLC,QAASH,EAAKf,cAEpBqB,OAAON,KAEb,YAACO,EAAA,EAAD,KACI,YAACb,EAAD,aAGA,YAACC,EAAD,KACKI,EAAMS,KAAI,SAACC,GAAD,OACP,YAAC,EAAD,CACIzB,MAAOyB,EAAKC,KAAKC,WACjB1B,YAAawB,EAAKC,KAAKE,yBACvB1B,KAAMuB,EAAKC,KAAKG,UAAUC,aAwBrCC,GAhBE,sBAAe,IAAZC,EAAW,EAAXA,KACRjB,EAAQiB,EAAKC,QAAQC,SAASC,MAC9BnB,EAAOgB,EAAKI,KAAKC,aACvB,OAAKtB,EAGD,YAAC,EAAD,CAAMA,MAAOA,EAAOC,KAAMA,IAHX,MAaL","file":"component---src-pages-code-js-ad7e0f18815f1ed4d365.js","sourcesContent":["import React from \"react\"\r\n// import { Link } from \"gatsby\";\r\nimport { RichText } from \"prismic-reactjs\"\r\nimport styled from \"@emotion/styled\"\r\nimport colors from \"styles/colors\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst PostCardContainer = styled(\"div\")`\r\n  border: 1px solid ${colors.grey200};\r\n  padding: 3em 2.5em 2.25em 2.5em;\r\n  border-radius: 3px;\r\n  text-decoration: none;\r\n  color: currentColor;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.06);\r\n  transition: all 150ms ease-in-out;\r\n\r\n  a {\r\n      text-decoration: none;\r\n      color: currentColor;  \r\n  }\r\n\r\n  &:hover {\r\n    box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.1);\r\n    transition: all 150ms ease-in-out;\r\n    cursor: pointer;\r\n\r\n    .PostCardAction {\r\n      color: ${colors.blue500};\r\n      transition: all 150ms ease-in-out;\r\n\r\n      span {\r\n        transform: translateX(0px);\r\n        opacity: 1;\r\n        transition: transform 150ms ease-in-out;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst PostTitle = styled(\"h3\")`\r\n  margin: 0;\r\n  margin-top: 0.5em;\r\n`\r\n\r\nconst PostDescription = styled(\"div\")`\r\n  margin-top: 2em;\r\n  margin-bottom: 4em;\r\n\r\n  p:last-of-type {\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nconst PostCardAction = styled(\"div\")`\r\n  font-weight: 600;\r\n  text-decoration: none;\r\n  color: currentColor;\r\n  transition: all 150ms ease-in-out;\r\n\r\n  span {\r\n    margin-left: 1em;\r\n    transform: translateX(-8px);\r\n    display: inline-block;\r\n    transition: transform 400ms ease-in-out;\r\n  }\r\n`\r\n\r\nconst PostCard = ({ title, description, link }) => (\r\n  <PostCardContainer className=\"BlogPostCard\">\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PostTitle>{title[0].text}</PostTitle>\r\n      <PostDescription>{RichText.render(description)}</PostDescription>\r\n      <PostCardAction className=\"PostCardAction\">\r\n        Visit <span>&#8594;</span>\r\n      </PostCardAction>\r\n    </a>\r\n  </PostCardContainer>\r\n)\r\n\r\nexport default PostCard\r\n\r\nPostCard.propTypes = {\r\n  author: PropTypes.string.isRequired,\r\n  category: PropTypes.array.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  title: PropTypes.array.isRequired,\r\n  description: PropTypes.array.isRequired,\r\n  uid: PropTypes.string.isRequired,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport styled from \"@emotion/styled\";\r\nimport dimensions from \"styles/dimensions\";\r\nimport Layout from \"components/Layout\";\r\nimport PostCard from \"components/PostCard\";\r\n\r\nconst BlogTitle = styled(\"h1\")`\r\n    margin-bottom: 1em;\r\n`\r\n\r\n\r\nconst BlogGrid = styled(\"div\")`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-gap: 2.5em;\r\n\r\n    @media(max-width: 1050px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-gap: 1.5em;\r\n    }\r\n\r\n    @media(max-width: ${dimensions.maxwidthMobile}px) {\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 2.5em;\r\n    }\r\n`\r\n\r\nconst Blog = ({ posts, meta }) => (\r\n    <>\r\n        <Helmet\r\n            title={`Vanaj Moorthy`}\r\n            titleTemplate={`Vanaj Moorthy`}\r\n            meta={[\r\n                {\r\n                    name: `Vanaj Moorthy's personal site`,\r\n                    content: meta.description,\r\n                },\r\n                {\r\n                    property: `og:title`,\r\n                    content: `Vanaj Moorthy's personal site`,\r\n                },\r\n                {\r\n                    property: `og:description`,\r\n                    content: meta.description,\r\n                },\r\n                {\r\n                    property: `og:type`,\r\n                    content: `website`,\r\n                },\r\n                {\r\n                    name: `twitter:card`,\r\n                    content: `summary`,\r\n                },\r\n                {\r\n                    name: `twitter:creator`,\r\n                    content: meta.author,\r\n                },\r\n                {\r\n                    name: `twitter:title`,\r\n                    content: meta.title,\r\n                },\r\n                {\r\n                    name: `twitter:description`,\r\n                    content: meta.description,\r\n                },\r\n            ].concat(meta)}\r\n        />\r\n        <Layout>\r\n            <BlogTitle>\r\n                Code\r\n            </BlogTitle>\r\n            <BlogGrid>\r\n                {posts.map((post) => (\r\n                    <PostCard\r\n                        title={post.node.post_title}\r\n                        description={post.node.post_preview_description}\r\n                        link={post.node.post_link.url}\r\n                    />\r\n                ))}\r\n            </BlogGrid>\r\n        </Layout>\r\n    </>\r\n);\r\n\r\nexport default ({ data }) => {\r\n    const posts = data.prismic.allPosts.edges;\r\n    const meta = data.site.siteMetadata;\r\n    if (!posts) return null;\r\n\r\n    return (\r\n        <Blog posts={posts} meta={meta}/>\r\n    )\r\n}\r\n\r\nBlog.propTypes = {\r\n    posts: PropTypes.array.isRequired,\r\n    meta: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport const query = graphql`\r\n    {\r\n        prismic {\r\n            allPosts(sortBy: meta_firstPublicationDate_DESC) {\r\n                edges {\r\n                    node {\r\n                        post_title\r\n                        post_category\r\n                        post_preview_description\r\n                        post_link {\r\n                            __typename\r\n                            ... on PRISMIC__ExternalLink {\r\n                                url\r\n                              }\r\n                        }\r\n                        post_hero_annotation\r\n                        post_body\r\n                        _meta {\r\n                            uid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        site {\r\n            siteMetadata {\r\n                title\r\n                description\r\n                author\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n"],"sourceRoot":""}