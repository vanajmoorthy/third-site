{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/_ui/Button.jsx"],"names":["Hero","dimensions","maxwidthMobile","colors","blue500","orange500","purple500","green500","teal500","blue600","blue200","orange600","orange200","purple600","purple200","green600","green200","teal600","teal200","RenderBody","home","meta","projects","title","titleTemplate","name","content","description","property","author","concat","RichText","render","hero_title","href","target","rel","hero_button_text","data","doc","prismic","allHomepages","edges","slice","pop","allProjects","site","siteMetadata","node","query","ButtonContainer","blue400","blue300","Button","this","props","children","onClick","Component"],"mappings":"0QAYMA,EAAO,YAAO,MAAP,sBAAH,oCAGaC,IAAWC,eAHxB,8IAe8BC,IAAOC,QAfrC,4BAgB8BD,IAAOE,UAhBrC,4BAiB8BF,IAAOG,UAjBrC,4BAkB8BH,IAAOI,SAlBrC,4BAmB8BJ,IAAOK,QAnBrC,oFAyBkCL,IAAOM,QAzBzC,qBAyB0EN,IAAOO,QAzBjF,4BA0BkCP,IAAOQ,UA1BzC,qBA0B0ER,IAAOS,UA1BjF,4BA2BkCT,IAAOU,UA3BzC,qBA2B0EV,IAAOW,UA3BjF,4BA4BkCX,IAAOY,SA5BzC,qBA4B0EZ,IAAOa,SA5BjF,4BA6BkCb,IAAOc,QA7BzC,qBA6B0Ed,IAAOe,QA7BjF,SAqCJC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAgBC,GAAnB,EAASC,SAAT,EAAmBD,MAAnB,OACf,8BACI,YAAC,IAAD,CACIE,MAAOF,EAAKE,MACZC,cAAa,QAAUH,EAAKE,MAC5BF,KAAM,CACF,CACII,KAAK,cACLC,QAASL,EAAKM,aAElB,CACIC,SAAS,WACTF,QAASL,EAAKE,OAElB,CACIK,SAAS,iBACTF,QAASL,EAAKM,aAElB,CACIC,SAAS,UACTF,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASL,EAAKQ,QAElB,CACIJ,KAAK,gBACLC,QAASL,EAAKE,OAElB,CACIE,KAAK,sBACLC,QAASL,EAAKM,cAEpBG,OAAOT,KAEb,YAACrB,EAAD,KACI,8BACK+B,WAASC,OAAOZ,EAAKa,aAE1B,iBAAGC,KAAK,4DACLC,OAAO,SAASC,IAAI,uBACnB,YAAC,IAAD,KACKL,WAASC,OAAOZ,EAAKiB,uBAO3B,sBAAe,IAAZC,EAAW,EAAXA,KAERC,EAAMD,EAAKE,QAAQC,aAAaC,MAAMC,MAAM,EAAG,GAAGC,MAClDtB,EAAWgB,EAAKE,QAAQK,YAAYH,MACpCrB,EAAOiB,EAAKQ,KAAKC,aAEvB,OAAKR,GAAQjB,EAGT,YAAC,IAAD,KACI,YAACH,EAAD,CAAYC,KAAMmB,EAAIS,KAAM1B,SAAUA,EAAUD,KAAMA,KAJhC,MAe3B,IAAM4B,EAAK,a,mWCvHlB,IAAMC,EAAkB,YAAO,SAAP,qBAAH,8BAEH/C,IAAOgD,QAFJ,sKAYElD,IAAWC,eAZb,kKA4ByBC,IAAOgD,QA5BhC,OA4B+ChD,IAAOM,QA5BtD,+JAyCCN,IAAOO,QAzCR,UA0CJP,IAAOM,QA1CH,8DA+CKN,IAAOiD,QA/CZ,+CAqDfC,E,gLACFrB,OAAA,WAAU,IAAD,EAC0BsB,KAAKC,MAAfA,GADhB,EACGC,S,oIADH,kBAEL,OACI,YAACN,EAAD,GACIO,QAASH,KAAKC,MAAME,SAChBF,GACHD,KAAKC,MAAMC,W,GAPPE,aAaNL","file":"component---src-pages-index-js-10e50a728531eb85b088.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { RichText } from \"prismic-reactjs\";\r\nimport styled from \"@emotion/styled\";\r\nimport colors from \"styles/colors\";\r\nimport dimensions from \"styles/dimensions\";\r\nimport Button from \"components/_ui/Button\";\r\nimport Layout from \"components/Layout\";\r\nimport { graphql } from \"gatsby\";\r\n\r\n\r\nconst Hero = styled(\"div\")`\r\n    max-width: 830px;\r\n\r\n    @media(max-width:${dimensions.maxwidthMobile}px) {\r\n       margin-bottom: 3em;\r\n    }\r\n\r\n    h1 {\r\n        margin-bottom: 1em;\r\n        font-size: 2.4em;\r\n\r\n        a {\r\n            text-decoration: none;\r\n            transition: all 100ms ease-in-out;\r\n\r\n            &:nth-of-type(1) { color: ${colors.blue500}; }\r\n            &:nth-of-type(2) { color: ${colors.orange500}; }\r\n            &:nth-of-type(3) { color: ${colors.purple500}; }\r\n            &:nth-of-type(4) { color: ${colors.green500}; }\r\n            &:nth-of-type(5) { color: ${colors.teal500}; }\r\n\r\n            &:hover {\r\n                cursor: pointer;\r\n                transition: all 100ms ease-in-out;\r\n\r\n                &:nth-of-type(1) { color: ${colors.blue600};    background-color: ${colors.blue200};}\r\n                &:nth-of-type(2) { color: ${colors.orange600};  background-color: ${colors.orange200};}\r\n                &:nth-of-type(3) { color: ${colors.purple600};  background-color: ${colors.purple200};}\r\n                &:nth-of-type(4) { color: ${colors.green600};   background-color: ${colors.green200};}\r\n                &:nth-of-type(5) { color: ${colors.teal600};    background-color: ${colors.teal200};}\r\n\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\nconst RenderBody = ({ home, projects, meta }) => (\r\n    <>\r\n        <Helmet\r\n            title={meta.title}\r\n            titleTemplate={`%s | ${meta.title}`}\r\n            meta={[\r\n                {\r\n                    name: `description`,\r\n                    content: meta.description,\r\n                },\r\n                {\r\n                    property: `og:title`,\r\n                    content: meta.title,\r\n                },\r\n                {\r\n                    property: `og:description`,\r\n                    content: meta.description,\r\n                },\r\n                {\r\n                    property: `og:type`,\r\n                    content: `website`,\r\n                },\r\n                {\r\n                    name: `twitter:card`,\r\n                    content: `summary`,\r\n                },\r\n                {\r\n                    name: `twitter:creator`,\r\n                    content: meta.author,\r\n                },\r\n                {\r\n                    name: `twitter:title`,\r\n                    content: meta.title,\r\n                },\r\n                {\r\n                    name: `twitter:description`,\r\n                    content: meta.description,\r\n                },\r\n            ].concat(meta)}\r\n        />\r\n        <Hero>\r\n            <>\r\n                {RichText.render(home.hero_title)}\r\n            </>\r\n            <a href=\"https://www.dropbox.com/s/fo4nnbeclwq4nkc/resume.pdf?dl=0\"\r\n               target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <Button>\r\n                    {RichText.render(home.hero_button_text)}\r\n                </Button>\r\n            </a>\r\n        </Hero>\r\n    </>\r\n);\r\n\r\nexport default ({ data }) => {\r\n    //Required check for no data being returned\r\n    const doc = data.prismic.allHomepages.edges.slice(0, 1).pop();\r\n    const projects = data.prismic.allProjects.edges;\r\n    const meta = data.site.siteMetadata;\r\n\r\n    if (!doc || !projects) return null;\r\n\r\n    return (\r\n        <Layout>\r\n            <RenderBody home={doc.node} projects={projects} meta={meta}/>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nRenderBody.propTypes = {\r\n    home: PropTypes.object.isRequired,\r\n    projects: PropTypes.array.isRequired,\r\n    meta: PropTypes.object.isRequired,\r\n};\r\n\r\nexport const query = graphql`\r\n    {\r\n        prismic {\r\n            allHomepages {\r\n                edges {\r\n                    node {\r\n                        hero_title\r\n                        hero_button_text\r\n                        hero_button_link {\r\n                            ... on PRISMIC__ExternalLink {\r\n                                _linkType\r\n                                url\r\n                            }\r\n                        }\r\n                        content\r\n                        about_title\r\n                        about_bio\r\n                        about_links {\r\n                            about_link\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            allProjects {\r\n                edges {\r\n                    node {\r\n                        project_title\r\n                        project_preview_description\r\n                        project_preview_thumbnail\r\n                        project_category\r\n                        project_post_date\r\n                        _meta {\r\n                            uid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        site {\r\n            siteMetadata {\r\n                title\r\n                description\r\n                author\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, { Component } from 'react';\nimport styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport dimensions from \"styles/dimensions\";\n\nconst ButtonContainer = styled(\"button\")`\n    padding: 1em 2em;\n    background: ${colors.blue400};\n    font-weight: 600;\n    color: white;\n    outline: none;\n    border: none;\n    font-size: 1rem;\n    border-radius: 50px;\n    position: relative;\n    transition: background 100ms ease-in-out;\n\n    @media(max-width:${dimensions.maxwidthMobile}px) {\n        padding: 0.8em 1.8em;\n        font-size: 1em;\n    }\n\n    p {\n        margin: 0;\n    }\n\n    &:before {\n        content: \"\";\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(135deg, ${colors.blue400} 0%, ${colors.blue600} 100%);\n        z-index: -1;\n        border-radius: 50px;\n\n    }\n\n    &:hover {\n        cursor: pointer;\n        background: transparent;\n        transition: background 100ms ease-in-out;\n    }\n\n    &.Button--secondary {\n        background: ${colors.blue200};\n        color: ${colors.blue600};\n        padding: 0.95em 1.8em;\n        font-size: 0.95rem;\n\n        &:hover {\n            background: ${colors.blue300};\n            transition: background 100ms ease-in-out;\n        }\n    }\n`\n\nclass Button extends Component {\n    render() {\n        const { children, ...props } = this.props;\n        return (\n            <ButtonContainer\n                onClick={this.props.onClick}\n                {...props}>\n                {this.props.children}\n            </ButtonContainer>\n        );\n    }\n}\n\nexport default Button;\n"],"sourceRoot":""}